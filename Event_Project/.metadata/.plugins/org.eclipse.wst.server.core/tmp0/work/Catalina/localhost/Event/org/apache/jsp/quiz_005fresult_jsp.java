/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2018-09-04 09:48:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class quiz_005fresult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>EVENT</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("@font-face{\r\n");
      out.write("\tfont-family: 'Calligraphy Personal Use'; src:url('font/Calligraphy Personal Use.ttf');\r\n");
      out.write("}\r\n");
      out.write("@font-face{font-family:'NANUMSQUAREROUNDL'; src:url('font/NANUMSQUAREROUNDL.TTF')}\r\n");
      out.write("@font-face{font-family:'NANUMSQUAREROUNDB'; src:url('font/NANUMSQUAREROUNDB.TTF')}\r\n");
      out.write("@import \"bourbon\";\r\n");
      out.write("\r\n");
      out.write("canvas {\r\n");
      out.write("  display: block;\r\n");
      out.write("  width: 350px;\r\n");
      out.write("  height: 350px;\r\n");
      out.write("  margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body{\r\n");
      out.write("\tmargin:0px;\r\n");
      out.write("\tpadding:0px;\r\n");
      out.write("\tfont-family:'NANUMSQUAREROUNDB';\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<center>\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

	String quiz1 = request.getParameter("quiz1");
	String quiz2 = request.getParameter("quiz2");
	int count = 1;
	
	String filename = "count.txt";
	String result;

	

      out.write("\r\n");
      out.write("\r\n");
      out.write("<h1 style = \"margin-top: 8%;\">당신의 결과는?</h1>\r\n");

	if(quiz1.equals("4") && quiz2.equals("2")){
      out.write("\r\n");
      out.write("\t<h2>축하합니다!!</h2>\r\n");
      out.write("\t\t<canvas id=\"celebration\"></canvas>\r\n");
      out.write("\t\t\r\n");
      out.write("\t<center><img src = \"http://cfile21.uf.tistory.com/image/99C51C3359E1D37B0F42EE\"  width=\"200\" height=\"200\"></center>\r\n");
      out.write("\t\t당신은 탐정이 될 자격을 갖추셨습니다!\r\n");
      out.write("\t\t<h2>첫번째 문제 해설</h2>\r\n");
      out.write("\t\t아무에게나 \"옆에 계신 분께 산티아고 가는 길을 물으면 어느 쪽이라고 답하실까요?\" <br><br>A와 B가 질문한 노인이\r\n");
      out.write("\t\t참말을 하는 노인이라면, <br><br>옆 사람은 거짓말을 하는 노인이므로 틀린 길을 알려줄 것이라는 걸 알고 그렇게 답할 것이다.<br><br>\r\n");
      out.write("\t\t만약 거짓말을 하는 노인에게 질문을 했다면, 그는 참말을 하는 노인과는 다른 길을 알려줄 것이다.<br><br> 따라서 누구에게 묻든 \r\n");
      out.write("\t\t답은 틀린 길이므로, 알려주는 쪽과 반대 방향으로 가면 산티아고로 갈 수 있다.\r\n");
      out.write("\t\t<br><br>\r\n");
      out.write("\t\t<h2>두번째 문제 해설</h2>\r\n");
      out.write("\t\t컴퓨터 숫자자판기를 보고 그대로 쳐보면 선이 그어진다. 그어보면 LN이 그려진다.\r\n");
      out.write("\t\t");

			if(count < 20){
      out.write("\r\n");
      out.write("\t\t\t<br><br><br><br>\r\n");
      out.write("\t\t\t\t<h1>축하합니다! 당신은 ");
      out.print(count );
      out.write("번째 당첨자입니다!</h1>\r\n");
      out.write("\t\t\t\t<h2>당신이 받을 책은</h2>\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\tvar image = new Array()\r\n");
      out.write("\t\t\t\timage[0] = \"http://mblogthumb1.phinf.naver.net/MjAxODAzMTlfMTk5/MDAxNTIxNDQ3NzQ3NjM2.WZShtX_uO_6JNCjy4xDTl9yvU6wH8278slTFLA-zaUcg.0Mm19c-3gQU2v65n9_Ye-rjnCH5XyFbuNSzHMRZffIwg.JPEG.hla9865/1452422-flyjoy77.jpg?type=w800\";\r\n");
      out.write("\t\t\t\timage[1] = \"https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/7ur/image/jF5nkBVAa_RBbcVq0lpbcK3Nfvc.jpg\";\r\n");
      out.write("\t\t\t\timage[2] = \"https://misc.ridibooks.com/cover/1153000080/xxlarge\";\r\n");
      out.write("\t\t\t\timage[3] = \"https://misc.ridibooks.com/cover/682000192/xxlarge\";\r\n");
      out.write("\t\t\t\tvar index = Math.floor(Math.random()*(image.length))\r\n");
      out.write("\t\t\t\tdocument.write(\"<center><img src=\"+image[index]+\" width = '300px' height='400px'></center>\");\r\n");
      out.write("\t\t\t\tif(index == 0){\r\n");
      out.write("\t\t\t\t\tdocument.write(\"<center><h3>용의자 X의 헌신</h3></center>\");\r\n");
      out.write("\t\t\t\t}else if(index == 1){\r\n");
      out.write("\t\t\t\t\tdocument.write(\"<center><h3>라플라스의 마녀</h3></center>\");\r\n");
      out.write("\t\t\t\t}else if(index == 2){\r\n");
      out.write("\t\t\t\t\tdocument.write(\"<center><h3>셜록 홈즈 전집</h3></center>\");\r\n");
      out.write("\t\t\t\t}else if(index == 3){\r\n");
      out.write("\t\t\t\t\tdocument.write(\"<center><h3>애거서 크리스티:그리고 아무도 없었다</h3></center>\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t");
}else if(count == 20){
      out.write("\r\n");
      out.write("\t\t\t\t<h1>축하합니다! 당신은 마지막 20번째 당첨자입니다!</h1>\r\n");
      out.write("\t\t\t");
}else{
      out.write("\r\n");
      out.write("\t\t\t\t<h1>아쉽게도 책 이벤트는 끝났습니다 ㅠㅠ 탐정 임명장에 도전해보세요!</h1>\r\n");
      out.write("\t\t\t");
}
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t");

	count++;
	}else{
      out.write("\r\n");
      out.write("\t\t<img src = \"https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/uOI/image/r0m7xUIYsLQfvTHxa2QNltxIy8k\" width=\"300px\" height=\"300px\"> \r\n");
      out.write("\t\t<h2>아쉽게도 틀렸습니다 ㅠㅠ 다음에 다시 한번 도전해보세요!</h2>\r\n");
      out.write("\t");
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</center>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("/* \r\n");
      out.write("*\r\n");
      out.write("* Modified and customized version of Szenia Zadvornykh’s work, “Party\r\n");
      out.write("* Preloader,” on Codepen: https://codepen.io/zadvorsky/pen/CoDes\r\n");
      out.write("* \r\n");
      out.write("*/\r\n");
      out.write("Point = function(x, y) {\r\n");
      out.write(" this.x = x || 0;\r\n");
      out.write(" this.y = y || 0;\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("Particle = function(ctx, p0, p1, p2, p3) {\r\n");
      out.write(" this.ctx = ctx;\r\n");
      out.write(" this.p0 = p0;\r\n");
      out.write(" this.p1 = p1;\r\n");
      out.write(" this.p2 = p2;\r\n");
      out.write(" this.p3 = p3;\r\n");
      out.write("\r\n");
      out.write(" this.time = 0;\r\n");
      out.write(" this.duration = 3 + Math.random() * 1;\r\n");
      out.write(" this.color =  '#' + Math.floor((Math.random() * 0xffffff)).toString(16);\r\n");
      out.write("\r\n");
      out.write(" this.w = 8;\r\n");
      out.write(" this.h = 6;\r\n");
      out.write("\r\n");
      out.write(" this.complete = false;\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("Particle.prototype = {\r\n");
      out.write(" update: function() {\r\n");
      out.write("   // (1/60) is timeStep\r\n");
      out.write("   this.time = Math.min(this.duration, this.time + (1/60));\r\n");
      out.write("\r\n");
      out.write("   var f = Ease.outCubic(this.time, .0125, 1, this.duration);\r\n");
      out.write("   var p = cubeBezier(this.p0, this.p1, this.p2, this.p3, f);\r\n");
      out.write("\r\n");
      out.write("   var dx = p.x - this.x;\r\n");
      out.write("   var dy = p.y - this.y;\r\n");
      out.write("\r\n");
      out.write("   this.r =  Math.atan2(dy, dx) + (Math.PI * 0.5);\r\n");
      out.write("   this.sy = Math.sin(Math.PI * f * 10);\r\n");
      out.write("   this.x = p.x;\r\n");
      out.write("   this.y = p.y;\r\n");
      out.write("\r\n");
      out.write("   this.complete = this.time === this.duration;\r\n");
      out.write(" },\r\n");
      out.write(" draw: function() {\r\n");
      out.write("   this.ctx.save();\r\n");
      out.write("   this.ctx.translate(this.x, this.y);\r\n");
      out.write("   this.ctx.rotate(this.r);\r\n");
      out.write("   this.ctx.scale(1, this.sy);\r\n");
      out.write("\r\n");
      out.write("   this.ctx.fillStyle = this.color;\r\n");
      out.write("   this.ctx.fillRect(-this.w * 0.5, -this.h * 0.5, this.w, this.h);\r\n");
      out.write("\r\n");
      out.write("   this.ctx.restore();\r\n");
      out.write(" }\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function CelebrationCanvas(canvas, width, height) {\r\n");
      out.write(" var particles = [];\r\n");
      out.write(" var ctx = canvas.getContext('2d');\r\n");
      out.write("\r\n");
      out.write(" canvas.width = width;\r\n");
      out.write(" canvas.height = height;\r\n");
      out.write(" createParticles();\r\n");
      out.write("\r\n");
      out.write(" function animate() {\r\n");
      out.write("   requestAnimationFrame(loop);\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write(" function createParticles() {\r\n");
      out.write("   for (var i = 0; i < 128; i++) {\r\n");
      out.write("     var p0 = new Point(width * 0.5, height * 0.5);\r\n");
      out.write("     var p1 = new Point(Math.random() * width, Math.random() * height);\r\n");
      out.write("     var p2 = new Point(Math.random() * width, Math.random() * height);\r\n");
      out.write("     var p3 = new Point(Math.random() * width, height + 64);\r\n");
      out.write("\r\n");
      out.write("     particles.push(new Particle(ctx, p0, p1, p2, p3));\r\n");
      out.write("   }\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write(" function update() {\r\n");
      out.write("   particles.forEach(function(p) {\r\n");
      out.write("     p.update();\r\n");
      out.write("   });\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write(" function draw() {\r\n");
      out.write("   ctx.clearRect(0, 0, width, height);\r\n");
      out.write("   particles.forEach(function(p) {\r\n");
      out.write("     p.draw();\r\n");
      out.write("   });\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write(" function loop() {\r\n");
      out.write("   update();\r\n");
      out.write("   draw();\r\n");
      out.write("\r\n");
      out.write("   if (checkParticlesComplete()) {\r\n");
      out.write("     // reset\r\n");
      out.write("     particles.length = 0;\r\n");
      out.write("     createParticles();\r\n");
      out.write("     setTimeout(function(){\r\n");
      out.write("       animate();\r\n");
      out.write("     }, (Math.random()*2000));\r\n");
      out.write("   } else {\r\n");
      out.write("     animate();\r\n");
      out.write("   }\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write(" function checkParticlesComplete() {\r\n");
      out.write("   for (var i = 0; i < particles.length; i++) {\r\n");
      out.write("     if (particles[i].complete === false) return false;\r\n");
      out.write("   }\r\n");
      out.write("   return true;\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write(" return {\r\n");
      out.write("   animate: animate\r\n");
      out.write(" };\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("var celebrationCanvas = new CelebrationCanvas(document.getElementById('celebration'), 600, 600);\r\n");
      out.write("\r\n");
      out.write("celebrationCanvas.animate();\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write("* easing equations from http://gizma.com/easing/\r\n");
      out.write("* t = current time\r\n");
      out.write("* b = start value\r\n");
      out.write("* c = delta value\r\n");
      out.write("* d = duration\r\n");
      out.write("*/\r\n");
      out.write("var Ease = {\r\n");
      out.write("\tinCubic: function (t, b, c, d) {\r\n");
      out.write("\t\tt /= d;\r\n");
      out.write("\t\treturn c*t*t*t + b;\r\n");
      out.write("\t},\r\n");
      out.write("\toutCubic: function(t, b, c, d) {\r\n");
      out.write("\t\tt /= d;\r\n");
      out.write("\t\tt--;\r\n");
      out.write("\t\treturn c*(t*t*t + 1) + b;\r\n");
      out.write("\t},\r\n");
      out.write("\tinOutCubic: function(t, b, c, d) {\r\n");
      out.write("\t\tt /= d/2;\r\n");
      out.write("\t\tif (t < 1) return c/2*t*t*t + b;\r\n");
      out.write("\t\tt -= 2;\r\n");
      out.write("\t\treturn c/2*(t*t*t + 2) + b;\r\n");
      out.write("\t},\r\n");
      out.write("\tinBack: function (t, b, c, d, s) {\r\n");
      out.write("\t\ts = s || 1.70158;\r\n");
      out.write("\t\treturn c*(t/=d)*t*((s+1)*t - s) + b;\r\n");
      out.write("\t}\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function cubeBezier(p0, c0, c1, p1, t) {\r\n");
      out.write("\tvar p = new Point();\r\n");
      out.write("\tvar nt = (1 - t);\r\n");
      out.write("\r\n");
      out.write("\tp.x = nt * nt * nt * p0.x + 3 * nt * nt * t * c0.x + 3 * nt * t * t * c1.x + t * t * t * p1.x;\r\n");
      out.write("\tp.y = nt * nt * nt * p0.y + 3 * nt * nt * t * c0.y + 3 * nt * t * t * c1.y + t * t * t * p1.y;\r\n");
      out.write("\r\n");
      out.write("\treturn p;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
